// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: customer.sql

package db

import (
	"context"
	"database/sql"
)

const createCustomer = `-- name: CreateCustomer :one
insert into customer(
    name,
    email,
    password
)values(
    $1,$2,$3
) RETURNING id, name, email, password, photo
`

type CreateCustomerParams struct {
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, createCustomer, arg.Name, arg.Email, arg.Password)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Photo,
	)
	return i, err
}

const getCustomer = `-- name: GetCustomer :one
select id, name, email, password, photo from customer
where ID = $1
`

func (q *Queries) GetCustomer(ctx context.Context, id int64) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomer, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Photo,
	)
	return i, err
}

const getCustomerByEmail = `-- name: GetCustomerByEmail :one
select id, name, email, password, photo from customer
where email = $1
`

func (q *Queries) GetCustomerByEmail(ctx context.Context, email string) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomerByEmail, email)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Photo,
	)
	return i, err
}

const updateUserPhoto = `-- name: UpdateUserPhoto :one
update customer set photo=$1 where email=$2 returning id, name, email, password, photo
`

type UpdateUserPhotoParams struct {
	Photo sql.NullString `json:"photo"`
	Email string         `json:"email"`
}

func (q *Queries) UpdateUserPhoto(ctx context.Context, arg UpdateUserPhotoParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, updateUserPhoto, arg.Photo, arg.Email)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Photo,
	)
	return i, err
}
