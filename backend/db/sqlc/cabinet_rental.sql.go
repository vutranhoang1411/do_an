// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: cabinet_rental.sql

package db

import (
	"context"
	"time"
)

const createCabinetRental = `-- name: CreateCabinetRental :one
insert into cabinet_locker_rentals(       
    CabinetID,    
    CustomerID,   
    rentdate,
    duration,  
    paymentMethod, 
    fee     
) values(
    $1,$2,$3,$4,$5,$6
) returning id, cabinetid, customerid, rentdate, duration, paymentmethod, fee
`

type CreateCabinetRentalParams struct {
	Cabinetid     int64     `json:"cabinetid"`
	Customerid    int64     `json:"customerid"`
	Rentdate      time.Time `json:"rentdate"`
	Duration      string    `json:"duration"`
	Paymentmethod string    `json:"paymentmethod"`
	Fee           float64   `json:"fee"`
}

func (q *Queries) CreateCabinetRental(ctx context.Context, arg CreateCabinetRentalParams) (CabinetLockerRental, error) {
	row := q.db.QueryRowContext(ctx, createCabinetRental,
		arg.Cabinetid,
		arg.Customerid,
		arg.Rentdate,
		arg.Duration,
		arg.Paymentmethod,
		arg.Fee,
	)
	var i CabinetLockerRental
	err := row.Scan(
		&i.ID,
		&i.Cabinetid,
		&i.Customerid,
		&i.Rentdate,
		&i.Duration,
		&i.Paymentmethod,
		&i.Fee,
	)
	return i, err
}

const getCabinetRentalByUser = `-- name: GetCabinetRentalByUser :many
select id, cabinetid, customerid, rentdate, duration, paymentmethod, fee from cabinet_locker_rentals where CustomerID=$1
`

func (q *Queries) GetCabinetRentalByUser(ctx context.Context, customerid int64) ([]CabinetLockerRental, error) {
	rows, err := q.db.QueryContext(ctx, getCabinetRentalByUser, customerid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CabinetLockerRental{}
	for rows.Next() {
		var i CabinetLockerRental
		if err := rows.Scan(
			&i.ID,
			&i.Cabinetid,
			&i.Customerid,
			&i.Rentdate,
			&i.Duration,
			&i.Paymentmethod,
			&i.Fee,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
