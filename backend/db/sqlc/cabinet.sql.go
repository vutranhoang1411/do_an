// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: cabinet.sql

package db

import (
	"context"
	"database/sql"
)

const getAvailableCabinet = `-- name: GetAvailableCabinet :many
select id, avail, open, start, userid from cabinet where avail=true
`

func (q *Queries) GetAvailableCabinet(ctx context.Context) ([]Cabinet, error) {
	rows, err := q.db.QueryContext(ctx, getAvailableCabinet)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Cabinet{}
	for rows.Next() {
		var i Cabinet
		if err := rows.Scan(
			&i.ID,
			&i.Avail,
			&i.Open,
			&i.Start,
			&i.Userid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCabinetByID = `-- name: GetCabinetByID :one
select id, avail, open, start, userid from cabinet where ID=$1
`

func (q *Queries) GetCabinetByID(ctx context.Context, id int64) (Cabinet, error) {
	row := q.db.QueryRowContext(ctx, getCabinetByID, id)
	var i Cabinet
	err := row.Scan(
		&i.ID,
		&i.Avail,
		&i.Open,
		&i.Start,
		&i.Userid,
	)
	return i, err
}

const getCabinetForRent = `-- name: GetCabinetForRent :one
select id, avail, open, start, userid from cabinet where ID=$1 FOR UPDATE
`

func (q *Queries) GetCabinetForRent(ctx context.Context, id int64) (Cabinet, error) {
	row := q.db.QueryRowContext(ctx, getCabinetForRent, id)
	var i Cabinet
	err := row.Scan(
		&i.ID,
		&i.Avail,
		&i.Open,
		&i.Start,
		&i.Userid,
	)
	return i, err
}

const getUserCabinet = `-- name: GetUserCabinet :many
select id, avail, open, start, userid from cabinet where userID=$1
`

func (q *Queries) GetUserCabinet(ctx context.Context, userid sql.NullInt64) ([]Cabinet, error) {
	rows, err := q.db.QueryContext(ctx, getUserCabinet, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Cabinet{}
	for rows.Next() {
		var i Cabinet
		if err := rows.Scan(
			&i.ID,
			&i.Avail,
			&i.Open,
			&i.Start,
			&i.Userid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const rentCabinet = `-- name: RentCabinet :exec
update cabinet set userID=$1, start=NOW() where ID=$2
`

type RentCabinetParams struct {
	Userid sql.NullInt64 `json:"userid"`
	ID     int64         `json:"id"`
}

func (q *Queries) RentCabinet(ctx context.Context, arg RentCabinetParams) error {
	_, err := q.db.ExecContext(ctx, rentCabinet, arg.Userid, arg.ID)
	return err
}

const unrentCabinet = `-- name: UnrentCabinet :exec
update cabinet set userID=null,start=null where ID=$1
`

func (q *Queries) UnrentCabinet(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, unrentCabinet, id)
	return err
}

const updateCabinetClose = `-- name: UpdateCabinetClose :one
update cabinet set open=false where ID=$1 returning id, avail, open, start, userid
`

func (q *Queries) UpdateCabinetClose(ctx context.Context, id int64) (Cabinet, error) {
	row := q.db.QueryRowContext(ctx, updateCabinetClose, id)
	var i Cabinet
	err := row.Scan(
		&i.ID,
		&i.Avail,
		&i.Open,
		&i.Start,
		&i.Userid,
	)
	return i, err
}

const updateCabinetOpen = `-- name: UpdateCabinetOpen :one
update cabinet set open=true where ID=$1 returning id, avail, open, start, userid
`

func (q *Queries) UpdateCabinetOpen(ctx context.Context, id int64) (Cabinet, error) {
	row := q.db.QueryRowContext(ctx, updateCabinetOpen, id)
	var i Cabinet
	err := row.Scan(
		&i.ID,
		&i.Avail,
		&i.Open,
		&i.Start,
		&i.Userid,
	)
	return i, err
}
